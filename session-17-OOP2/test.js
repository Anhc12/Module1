'use strict';

class WordGame {
    constructor() {
        this.wordList = [
            { anwser: 'nh·ªè gi·ªçt', hint: 'V√≠ c√°ch cung c·∫•p nay m·ªôt √≠t, mai m·ªôt √≠t v√† qu√° ch·∫≠m' },
            { anwser: 'sao ch·ªïi', hint: 'M·ªôt hi·ªán t∆∞·ª£ng thi√™n nhi√™n, m·ªçi ng∆∞·ªùi th∆∞·ªùng ∆∞·ªõc khi nh√¨n th·∫•y!' },
            { anwser: 'tinh d·∫ßu', hint: 'C√≥ m√πi th∆°m, th∆∞·ªùng d√πng ƒë·ªÉ x√¥ng h∆°i!' },
            { anwser: 'm·∫•t l√≤ng', hint: 'C√≥ ƒëi·ªÅu kh√¥ng b·∫±ng l√≤ng, kh√¥ng h√†i l√≤ng v√¨ m·ªôt h√†nh vi, th√°i ƒë·ªô kh√¥ng ph·∫£i n√†o ƒë√≥' },
            { anwser: 'thi·ªán c·∫£m', hint: 'T√¨nh c·∫£m t·ªët, ∆∞a th√≠ch ƒë·ªëi v·ªõi ai ƒë√≥.' },
            { anwser: 'ƒëoan trang', hint: 'Ch·ªâ ng∆∞·ªùi ph·ª• n·ªØ ƒë·ª©ng ƒë·∫Øn v√† nghi√™m trang' },
            { anwser: 'ph·∫•t tr·∫ßn', hint: 'V·∫≠t d·ª•ng g·∫Øn li·ªÅn v·ªõi nh√¢n v·∫≠t "√¥ng B·ª•t"!' },
            { anwser: 'c√¥ng t·ª≠', hint: 'Con trai nh√† quan, nh√† quy·ªÅn qu√Ω th·ªùi phong ki·∫øn!' },
            { anwser: 'chƒÉm ch√∫t', hint: 'Ch√∫ √Ω ƒë·∫øn t·ª´ng li t·ª´ng t√≠, ƒë·ªÉ cho l√∫c n√†o c≈©ng ·ªü trong t√¨nh tr·∫°ng t·ªët nh·∫•t.' },
            { anwser: 'tr·ªëng v·∫Øng', hint: 'V√¨ thi·∫øu m·∫•t ƒëi c√°i th∆∞·ªùng ph·∫£i c√≥, g√¢y c·∫£m gi√°c bu·ªìn v√† tr·ªëng tr·∫£i.' }
        ];
        this.currentWord = null; // T·ª´ kh√≥a hi·ªán t·∫°i
        this.scrambledWord = ''; // T·ª´ x√°o tr·ªôn hi·ªán t·∫°i
        this.timer = null; // Bi·∫øn h·∫πn gi·ªù
        this.timeLeft = 30; // Th·ªùi gian ƒë·∫øm ng∆∞·ª£c
        this.correctAnswer = 0; // S·ªë c√¢u tr·∫£ l·ªùi ƒë√∫ng
        this.score = 0; // ƒêi·ªÉm s·ªë
        this.hintUsed = false; // C·ªù ki·ªÉm tra c√≥ s·ª≠ d·ª•ng g·ª£i √Ω kh√¥ng

        // Nh·∫°c n·ªÅn
        this.backgroundMusic = new Audio('vuatiengviet.m4a');
        this.backgroundMusic.loop = true;
        this.backgroundMusic.volume = 0.5;

        // G·∫Øn s·ª± ki·ªán
        this.initEvents();
        this.disableInputs();
    }

    // Getter ƒë·ªÉ l·∫•y danh s√°ch t·ª´ kh√≥a
    get wordListData() {
        return this.wordList;
    }

    // Getter ƒë·ªÉ l·∫•y t·ª´ kh√≥a hi·ªán t·∫°i
    get currentWordData() {
        return this.currentWord;
    }

    // Getter ƒë·ªÉ l·∫•y t·ª´ x√°o tr·ªôn
    get scrambledWordData() {
        return this.scrambledWord;
    }

    // Getter ƒë·ªÉ l·∫•y ƒëi·ªÉm s·ªë hi·ªán t·∫°i
    get currentScore() {
        return this.score;
    }

    // Getter ƒë·ªÉ l·∫•y s·ªë c√¢u tr·∫£ l·ªùi ƒë√∫ng
    get correctAnswersCount() {
        return this.correctAnswer;
    }

    // B·∫≠t nh·∫°c n·ªÅn
    playMusic() {
        this.backgroundMusic.play();
    }

    // T·∫Øt nh·∫°c n·ªÅn
    stopMusic() {
        this.backgroundMusic.pause();
        this.backgroundMusic.currentTime = 0;
    }

    // X√°o tr·ªôn t·ª´ kh√≥a
    shuffleWord(word) {
        let shuffled = word.split('');
        do {
            shuffled = word.split('').sort(() => Math.random() - 0.5).join('');
        } while (shuffled === word); // ƒê·∫£m b·∫£o t·ª´ x√°o tr·ªôn kh√°c ƒë√°p √°n
        return shuffled;
    }

    // Sinh t·ª´ m·ªõi
    generateNewWord() {
        let newWord;
        do {
            newWord = this.wordList[Math.floor(Math.random() * this.wordList.length)];
        } while (newWord === this.currentWord); // Tr√°nh l·∫∑p l·∫°i t·ª´ c≈©

        this.currentWord = newWord;
        this.scrambledWord = this.shuffleWord(newWord.anwser);

        document.querySelector('.scrambled-word').textContent = this.scrambledWord;
        document.querySelector('.message').textContent = 'B·∫Øt ƒë·∫ßu ƒëo√°n!';
        document.querySelector('.guess-input').value = '';
        document.querySelector('.container').style.backgroundColor = '#fff';

        this.startTimer();
    }

    // B·∫Øt ƒë·∫ßu ƒë·∫øm th·ªùi gian
    startTimer() {
        this.timeLeft = 30;
        document.querySelector('.timer').textContent = `Th·ªùi gian: ${this.timeLeft}s`;
        this.playMusic();

        clearInterval(this.timer);
        this.timer = setInterval(() => {
            this.timeLeft--;
            document.querySelector('.timer').textContent = `Th·ªùi gian: ${this.timeLeft}s`;

            if (this.timeLeft <= 0) {
                clearInterval(this.timer);
                document.querySelector('.message').textContent = '‚è∞ H·∫øt gi·ªù!';
                this.disableInputs();
                this.stopMusic();
            }
        }, 1000);
    }

    // Kh√≥a input v√† n√∫t check
    disableInputs() {
        document.querySelector('.guess-input').disabled = true;
        document.querySelector('.check-button').disabled = true;
    }

    // M·ªü input v√† n√∫t check
    enableInputs() {
        document.querySelector('.guess-input').disabled = false;
        document.querySelector('.check-button').disabled = false;
    }

    // B·∫Øt ƒë·∫ßu game
    startGame() {
        this.generateNewWord();
        this.enableInputs();
        document.querySelector('.start-button').disabled = true;
    }

    // ƒê·∫∑t l·∫°i game
    resetGame() {
        this.score = 0;
        this.correctAnswer = 0;
        document.querySelector('.score').textContent = `ƒêi·ªÉm: ${this.score}`;
        document.querySelector('.correct-answer').textContent = `C√¢u ƒë√∫ng: ${this.correctAnswer}`;
        this.startGame();
    }

    // Ki·ªÉm tra ƒë√°p √°n
    checkGuess() {
        const guess = document.querySelector('.guess-input').value.trim().toLowerCase();
        if (!guess) {
            document.querySelector('.message').textContent = '‚õî Nh·∫≠p c√¢u tr·∫£ l·ªùi!';
            return;
        }

        if (guess === this.currentWord.anwser) {
            this.correctAnswer++;
            this.score += this.hintUsed ? 5 : 10;
            document.querySelector('.score').textContent = `ƒêi·ªÉm: ${this.score}`;
            document.querySelector('.correct-answer').textContent = `C√¢u ƒë√∫ng: ${this.correctAnswer}`;

            Swal.fire('üéâ ƒê√∫ng r·ªìi!', '', 'success');
            this.generateNewWord();
        } else {
            document.querySelector('.message').textContent = '‚ùå Sai r·ªìi!';
        }
    }

    // Hi·ªÉn th·ªã g·ª£i √Ω
    showHint() {
        this.hintUsed = true;
        Swal.fire({
            title: 'G·ª£i √Ω',
            text: this.currentWord.hint,
            imageUrl: './bongden.png',
            imageWidth: 80,
            imageHeight: 90,
            imageAlt: 'Hint'
        });
    }

    // Th√™m c√¢u h·ªèi m·ªõi
    addQuestion() {
        Swal.fire({
            title: 'Th√™m c√¢u h·ªèi m·ªõi',
            html: `
                <input type="text" id="newWord" class="swal2-input" placeholder="Nh·∫≠p t·ª´ kh√≥a">
                <input type="text" id="newHint" class="swal2-input" placeholder="Nh·∫≠p g·ª£i √Ω">
            `,
            showCancelButton: true,
            confirmButtonText: 'Th√™m',
            cancelButtonText: 'H·ªßy',
            preConfirm: () => {
                const newWord = document.getElementById('newWord').value.trim();
                const newHint = document.getElementById('newHint').value.trim();

                if (!newWord || !newHint) {
                    Swal.showValidationMessage('Vui l√≤ng nh·∫≠p c·∫£ t·ª´ kh√≥a v√† g·ª£i √Ω');
                    return false;
                }
                return { anwser: newWord, hint: newHint };
            }
        }).then((result) => {
            if (result.isConfirmed) {
                const newQuestion = result.value;
                const isDuplicate = this.wordList.some(word => word.anwser.toLowerCase() === newQuestion.anwser.toLowerCase());

                if (isDuplicate) {
                    Swal.fire('L·ªói', 'T·ª´ kh√≥a ƒë√£ t·ªìn t·∫°i!', 'error');
                } else {
                    this.wordList.push(newQuestion);
                    Swal.fire('Th√†nh c√¥ng', 'C√¢u h·ªèi m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m!', 'success');
                }
            }
        });
    }

    // G·∫Øn s·ª± ki·ªán
    initEvents() {
        document.querySelector('.start-button').addEventListener('click', () => this.startGame());
        document.querySelector('.reset-button').addEventListener('click', () => this.resetGame());
        document.querySelector('.check-button').addEventListener('click', () => this.checkGuess());
        document.querySelector('.add-question-button').addEventListener('click', () => this.addQuestion());
        document.querySelector('.guess-input').addEventListener('keydown', (event) => {
            if (event.key === 'Enter') this.checkGuess();
        });
    }
}

// Kh·ªüi t·∫°o game
document.addEventListener('DOMContentLoaded', () => {
    new WordGame();
});
